// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hypergridssn/hypergridssn/grid_block_fee.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GridBlockFee struct {
	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Grid      string `protobuf:"bytes,2,opt,name=grid,proto3" json:"grid,omitempty"`
	Slot      string `protobuf:"bytes,3,opt,name=slot,proto3" json:"slot,omitempty"`
	Blockhash string `protobuf:"bytes,4,opt,name=blockhash,proto3" json:"blockhash,omitempty"`
	Blocktime int32  `protobuf:"varint,5,opt,name=blocktime,proto3" json:"blocktime,omitempty"`
	Fee       string `protobuf:"bytes,6,opt,name=fee,proto3" json:"fee,omitempty"`
	Creator   string `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *GridBlockFee) Reset()         { *m = GridBlockFee{} }
func (m *GridBlockFee) String() string { return proto.CompactTextString(m) }
func (*GridBlockFee) ProtoMessage()    {}
func (*GridBlockFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f52928e98613625, []int{0}
}
func (m *GridBlockFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GridBlockFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GridBlockFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GridBlockFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GridBlockFee.Merge(m, src)
}
func (m *GridBlockFee) XXX_Size() int {
	return m.Size()
}
func (m *GridBlockFee) XXX_DiscardUnknown() {
	xxx_messageInfo_GridBlockFee.DiscardUnknown(m)
}

var xxx_messageInfo_GridBlockFee proto.InternalMessageInfo

func (m *GridBlockFee) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GridBlockFee) GetGrid() string {
	if m != nil {
		return m.Grid
	}
	return ""
}

func (m *GridBlockFee) GetSlot() string {
	if m != nil {
		return m.Slot
	}
	return ""
}

func (m *GridBlockFee) GetBlockhash() string {
	if m != nil {
		return m.Blockhash
	}
	return ""
}

func (m *GridBlockFee) GetBlocktime() int32 {
	if m != nil {
		return m.Blocktime
	}
	return 0
}

func (m *GridBlockFee) GetFee() string {
	if m != nil {
		return m.Fee
	}
	return ""
}

func (m *GridBlockFee) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*GridBlockFee)(nil), "hypergridssn.hypergridssn.GridBlockFee")
}

func init() {
	proto.RegisterFile("hypergridssn/hypergridssn/grid_block_fee.proto", fileDescriptor_3f52928e98613625)
}

var fileDescriptor_3f52928e98613625 = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0xcb, 0xa8, 0x2c, 0x48,
	0x2d, 0x4a, 0x2f, 0xca, 0x4c, 0x29, 0x2e, 0xce, 0xd3, 0x47, 0xe1, 0x80, 0xe8, 0xf8, 0xa4, 0x9c,
	0xfc, 0xe4, 0xec, 0xf8, 0xb4, 0xd4, 0x54, 0xbd, 0x82, 0xa2, 0xfc, 0x92, 0x7c, 0x21, 0x49, 0x64,
	0x25, 0x28, 0x9a, 0x95, 0xd6, 0x31, 0x72, 0xf1, 0xb8, 0x17, 0x65, 0xa6, 0x38, 0x81, 0xb4, 0xb8,
	0xa5, 0xa6, 0x0a, 0xf1, 0x71, 0x31, 0x65, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x04, 0x31,
	0x65, 0xa6, 0x08, 0x09, 0x71, 0xb1, 0x80, 0xd4, 0x4a, 0x30, 0x29, 0x30, 0x6a, 0x70, 0x06, 0x81,
	0xd9, 0x20, 0xb1, 0xe2, 0x9c, 0xfc, 0x12, 0x09, 0x66, 0x88, 0x18, 0x88, 0x2d, 0x24, 0xc3, 0xc5,
	0x09, 0xb6, 0x36, 0x23, 0xb1, 0x38, 0x43, 0x82, 0x05, 0x2c, 0x81, 0x10, 0x80, 0xcb, 0x96, 0x64,
	0xe6, 0xa6, 0x4a, 0xb0, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x21, 0x04, 0x84, 0x04, 0xb8, 0x98, 0xd3,
	0x52, 0x53, 0x25, 0xd8, 0xc0, 0xba, 0x40, 0x4c, 0x21, 0x09, 0x2e, 0xf6, 0xe4, 0xa2, 0xd4, 0xc4,
	0x92, 0xfc, 0x22, 0x09, 0x76, 0xb0, 0x28, 0x8c, 0xeb, 0x64, 0x73, 0xe2, 0x91, 0x1c, 0xe3, 0x85,
	0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3,
	0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x4a, 0x70, 0x8f, 0xe9, 0x82, 0x42, 0xa2, 0x02, 0x35, 0x60, 0x4a,
	0x2a, 0x0b, 0x52, 0x8b, 0x93, 0xd8, 0xc0, 0x01, 0x62, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x44,
	0x5c, 0xe1, 0xf7, 0x42, 0x01, 0x00, 0x00,
}

func (m *GridBlockFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GridBlockFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GridBlockFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintGridBlockFee(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Fee) > 0 {
		i -= len(m.Fee)
		copy(dAtA[i:], m.Fee)
		i = encodeVarintGridBlockFee(dAtA, i, uint64(len(m.Fee)))
		i--
		dAtA[i] = 0x32
	}
	if m.Blocktime != 0 {
		i = encodeVarintGridBlockFee(dAtA, i, uint64(m.Blocktime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Blockhash) > 0 {
		i -= len(m.Blockhash)
		copy(dAtA[i:], m.Blockhash)
		i = encodeVarintGridBlockFee(dAtA, i, uint64(len(m.Blockhash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Slot) > 0 {
		i -= len(m.Slot)
		copy(dAtA[i:], m.Slot)
		i = encodeVarintGridBlockFee(dAtA, i, uint64(len(m.Slot)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Grid) > 0 {
		i -= len(m.Grid)
		copy(dAtA[i:], m.Grid)
		i = encodeVarintGridBlockFee(dAtA, i, uint64(len(m.Grid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintGridBlockFee(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGridBlockFee(dAtA []byte, offset int, v uint64) int {
	offset -= sovGridBlockFee(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GridBlockFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGridBlockFee(uint64(m.Id))
	}
	l = len(m.Grid)
	if l > 0 {
		n += 1 + l + sovGridBlockFee(uint64(l))
	}
	l = len(m.Slot)
	if l > 0 {
		n += 1 + l + sovGridBlockFee(uint64(l))
	}
	l = len(m.Blockhash)
	if l > 0 {
		n += 1 + l + sovGridBlockFee(uint64(l))
	}
	if m.Blocktime != 0 {
		n += 1 + sovGridBlockFee(uint64(m.Blocktime))
	}
	l = len(m.Fee)
	if l > 0 {
		n += 1 + l + sovGridBlockFee(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovGridBlockFee(uint64(l))
	}
	return n
}

func sovGridBlockFee(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGridBlockFee(x uint64) (n int) {
	return sovGridBlockFee(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GridBlockFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGridBlockFee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GridBlockFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GridBlockFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGridBlockFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGridBlockFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGridBlockFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGridBlockFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGridBlockFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGridBlockFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGridBlockFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockhash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGridBlockFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGridBlockFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGridBlockFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blockhash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocktime", wireType)
			}
			m.Blocktime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGridBlockFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Blocktime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGridBlockFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGridBlockFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGridBlockFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGridBlockFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGridBlockFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGridBlockFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGridBlockFee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGridBlockFee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGridBlockFee(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGridBlockFee
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGridBlockFee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGridBlockFee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGridBlockFee
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGridBlockFee
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGridBlockFee
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGridBlockFee        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGridBlockFee          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGridBlockFee = fmt.Errorf("proto: unexpected end of group")
)
