// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hypergridssn/hypergridssn/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3130d2b35cb8776, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3130d2b35cb8776, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetSolanaAccountRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *QueryGetSolanaAccountRequest) Reset()         { *m = QueryGetSolanaAccountRequest{} }
func (m *QueryGetSolanaAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSolanaAccountRequest) ProtoMessage()    {}
func (*QueryGetSolanaAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3130d2b35cb8776, []int{2}
}
func (m *QueryGetSolanaAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSolanaAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSolanaAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSolanaAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSolanaAccountRequest.Merge(m, src)
}
func (m *QueryGetSolanaAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSolanaAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSolanaAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSolanaAccountRequest proto.InternalMessageInfo

func (m *QueryGetSolanaAccountRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryGetSolanaAccountRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type QueryGetSolanaAccountResponse struct {
	SolanaAccount SolanaAccount `protobuf:"bytes,1,opt,name=solanaAccount,proto3" json:"solanaAccount"`
}

func (m *QueryGetSolanaAccountResponse) Reset()         { *m = QueryGetSolanaAccountResponse{} }
func (m *QueryGetSolanaAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSolanaAccountResponse) ProtoMessage()    {}
func (*QueryGetSolanaAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3130d2b35cb8776, []int{3}
}
func (m *QueryGetSolanaAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSolanaAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSolanaAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSolanaAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSolanaAccountResponse.Merge(m, src)
}
func (m *QueryGetSolanaAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSolanaAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSolanaAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSolanaAccountResponse proto.InternalMessageInfo

func (m *QueryGetSolanaAccountResponse) GetSolanaAccount() SolanaAccount {
	if m != nil {
		return m.SolanaAccount
	}
	return SolanaAccount{}
}

type QueryAllSolanaAccountRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSolanaAccountRequest) Reset()         { *m = QueryAllSolanaAccountRequest{} }
func (m *QueryAllSolanaAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSolanaAccountRequest) ProtoMessage()    {}
func (*QueryAllSolanaAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3130d2b35cb8776, []int{4}
}
func (m *QueryAllSolanaAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSolanaAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSolanaAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSolanaAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSolanaAccountRequest.Merge(m, src)
}
func (m *QueryAllSolanaAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSolanaAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSolanaAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSolanaAccountRequest proto.InternalMessageInfo

func (m *QueryAllSolanaAccountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSolanaAccountResponse struct {
	SolanaAccount []SolanaAccount     `protobuf:"bytes,1,rep,name=solanaAccount,proto3" json:"solanaAccount"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSolanaAccountResponse) Reset()         { *m = QueryAllSolanaAccountResponse{} }
func (m *QueryAllSolanaAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSolanaAccountResponse) ProtoMessage()    {}
func (*QueryAllSolanaAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3130d2b35cb8776, []int{5}
}
func (m *QueryAllSolanaAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSolanaAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSolanaAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSolanaAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSolanaAccountResponse.Merge(m, src)
}
func (m *QueryAllSolanaAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSolanaAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSolanaAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSolanaAccountResponse proto.InternalMessageInfo

func (m *QueryAllSolanaAccountResponse) GetSolanaAccount() []SolanaAccount {
	if m != nil {
		return m.SolanaAccount
	}
	return nil
}

func (m *QueryAllSolanaAccountResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetGridBlockFeeRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetGridBlockFeeRequest) Reset()         { *m = QueryGetGridBlockFeeRequest{} }
func (m *QueryGetGridBlockFeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGridBlockFeeRequest) ProtoMessage()    {}
func (*QueryGetGridBlockFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3130d2b35cb8776, []int{6}
}
func (m *QueryGetGridBlockFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGridBlockFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGridBlockFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGridBlockFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGridBlockFeeRequest.Merge(m, src)
}
func (m *QueryGetGridBlockFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGridBlockFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGridBlockFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGridBlockFeeRequest proto.InternalMessageInfo

func (m *QueryGetGridBlockFeeRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetGridBlockFeeResponse struct {
	GridBlockFee GridBlockFee `protobuf:"bytes,1,opt,name=GridBlockFee,proto3" json:"GridBlockFee"`
}

func (m *QueryGetGridBlockFeeResponse) Reset()         { *m = QueryGetGridBlockFeeResponse{} }
func (m *QueryGetGridBlockFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetGridBlockFeeResponse) ProtoMessage()    {}
func (*QueryGetGridBlockFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3130d2b35cb8776, []int{7}
}
func (m *QueryGetGridBlockFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGridBlockFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGridBlockFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGridBlockFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGridBlockFeeResponse.Merge(m, src)
}
func (m *QueryGetGridBlockFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGridBlockFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGridBlockFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGridBlockFeeResponse proto.InternalMessageInfo

func (m *QueryGetGridBlockFeeResponse) GetGridBlockFee() GridBlockFee {
	if m != nil {
		return m.GridBlockFee
	}
	return GridBlockFee{}
}

type QueryAllGridBlockFeeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGridBlockFeeRequest) Reset()         { *m = QueryAllGridBlockFeeRequest{} }
func (m *QueryAllGridBlockFeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllGridBlockFeeRequest) ProtoMessage()    {}
func (*QueryAllGridBlockFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3130d2b35cb8776, []int{8}
}
func (m *QueryAllGridBlockFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGridBlockFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGridBlockFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGridBlockFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGridBlockFeeRequest.Merge(m, src)
}
func (m *QueryAllGridBlockFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGridBlockFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGridBlockFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGridBlockFeeRequest proto.InternalMessageInfo

func (m *QueryAllGridBlockFeeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllGridBlockFeeResponse struct {
	GridBlockFee []GridBlockFee      `protobuf:"bytes,1,rep,name=GridBlockFee,proto3" json:"GridBlockFee"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGridBlockFeeResponse) Reset()         { *m = QueryAllGridBlockFeeResponse{} }
func (m *QueryAllGridBlockFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllGridBlockFeeResponse) ProtoMessage()    {}
func (*QueryAllGridBlockFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3130d2b35cb8776, []int{9}
}
func (m *QueryAllGridBlockFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGridBlockFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGridBlockFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGridBlockFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGridBlockFeeResponse.Merge(m, src)
}
func (m *QueryAllGridBlockFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGridBlockFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGridBlockFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGridBlockFeeResponse proto.InternalMessageInfo

func (m *QueryAllGridBlockFeeResponse) GetGridBlockFee() []GridBlockFee {
	if m != nil {
		return m.GridBlockFee
	}
	return nil
}

func (m *QueryAllGridBlockFeeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetHypergridNodeRequest struct {
	Pubkey string `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *QueryGetHypergridNodeRequest) Reset()         { *m = QueryGetHypergridNodeRequest{} }
func (m *QueryGetHypergridNodeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetHypergridNodeRequest) ProtoMessage()    {}
func (*QueryGetHypergridNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3130d2b35cb8776, []int{10}
}
func (m *QueryGetHypergridNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHypergridNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHypergridNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHypergridNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHypergridNodeRequest.Merge(m, src)
}
func (m *QueryGetHypergridNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHypergridNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHypergridNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHypergridNodeRequest proto.InternalMessageInfo

func (m *QueryGetHypergridNodeRequest) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

type QueryGetHypergridNodeResponse struct {
	HypergridNode HypergridNode `protobuf:"bytes,1,opt,name=hypergridNode,proto3" json:"hypergridNode"`
}

func (m *QueryGetHypergridNodeResponse) Reset()         { *m = QueryGetHypergridNodeResponse{} }
func (m *QueryGetHypergridNodeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetHypergridNodeResponse) ProtoMessage()    {}
func (*QueryGetHypergridNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3130d2b35cb8776, []int{11}
}
func (m *QueryGetHypergridNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHypergridNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHypergridNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHypergridNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHypergridNodeResponse.Merge(m, src)
}
func (m *QueryGetHypergridNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHypergridNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHypergridNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHypergridNodeResponse proto.InternalMessageInfo

func (m *QueryGetHypergridNodeResponse) GetHypergridNode() HypergridNode {
	if m != nil {
		return m.HypergridNode
	}
	return HypergridNode{}
}

type QueryAllHypergridNodeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHypergridNodeRequest) Reset()         { *m = QueryAllHypergridNodeRequest{} }
func (m *QueryAllHypergridNodeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllHypergridNodeRequest) ProtoMessage()    {}
func (*QueryAllHypergridNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3130d2b35cb8776, []int{12}
}
func (m *QueryAllHypergridNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHypergridNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHypergridNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHypergridNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHypergridNodeRequest.Merge(m, src)
}
func (m *QueryAllHypergridNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHypergridNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHypergridNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHypergridNodeRequest proto.InternalMessageInfo

func (m *QueryAllHypergridNodeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllHypergridNodeResponse struct {
	HypergridNode []HypergridNode     `protobuf:"bytes,1,rep,name=hypergridNode,proto3" json:"hypergridNode"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHypergridNodeResponse) Reset()         { *m = QueryAllHypergridNodeResponse{} }
func (m *QueryAllHypergridNodeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllHypergridNodeResponse) ProtoMessage()    {}
func (*QueryAllHypergridNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3130d2b35cb8776, []int{13}
}
func (m *QueryAllHypergridNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHypergridNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHypergridNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHypergridNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHypergridNodeResponse.Merge(m, src)
}
func (m *QueryAllHypergridNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHypergridNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHypergridNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHypergridNodeResponse proto.InternalMessageInfo

func (m *QueryAllHypergridNodeResponse) GetHypergridNode() []HypergridNode {
	if m != nil {
		return m.HypergridNode
	}
	return nil
}

func (m *QueryAllHypergridNodeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetFeeSettlementBillRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetFeeSettlementBillRequest) Reset()         { *m = QueryGetFeeSettlementBillRequest{} }
func (m *QueryGetFeeSettlementBillRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetFeeSettlementBillRequest) ProtoMessage()    {}
func (*QueryGetFeeSettlementBillRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3130d2b35cb8776, []int{14}
}
func (m *QueryGetFeeSettlementBillRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFeeSettlementBillRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFeeSettlementBillRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFeeSettlementBillRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFeeSettlementBillRequest.Merge(m, src)
}
func (m *QueryGetFeeSettlementBillRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFeeSettlementBillRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFeeSettlementBillRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFeeSettlementBillRequest proto.InternalMessageInfo

func (m *QueryGetFeeSettlementBillRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetFeeSettlementBillResponse struct {
	FeeSettlementBill FeeSettlementBill `protobuf:"bytes,1,opt,name=FeeSettlementBill,proto3" json:"FeeSettlementBill"`
}

func (m *QueryGetFeeSettlementBillResponse) Reset()         { *m = QueryGetFeeSettlementBillResponse{} }
func (m *QueryGetFeeSettlementBillResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetFeeSettlementBillResponse) ProtoMessage()    {}
func (*QueryGetFeeSettlementBillResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3130d2b35cb8776, []int{15}
}
func (m *QueryGetFeeSettlementBillResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFeeSettlementBillResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFeeSettlementBillResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFeeSettlementBillResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFeeSettlementBillResponse.Merge(m, src)
}
func (m *QueryGetFeeSettlementBillResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFeeSettlementBillResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFeeSettlementBillResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFeeSettlementBillResponse proto.InternalMessageInfo

func (m *QueryGetFeeSettlementBillResponse) GetFeeSettlementBill() FeeSettlementBill {
	if m != nil {
		return m.FeeSettlementBill
	}
	return FeeSettlementBill{}
}

type QueryAllFeeSettlementBillRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFeeSettlementBillRequest) Reset()         { *m = QueryAllFeeSettlementBillRequest{} }
func (m *QueryAllFeeSettlementBillRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllFeeSettlementBillRequest) ProtoMessage()    {}
func (*QueryAllFeeSettlementBillRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3130d2b35cb8776, []int{16}
}
func (m *QueryAllFeeSettlementBillRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFeeSettlementBillRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFeeSettlementBillRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFeeSettlementBillRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFeeSettlementBillRequest.Merge(m, src)
}
func (m *QueryAllFeeSettlementBillRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFeeSettlementBillRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFeeSettlementBillRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFeeSettlementBillRequest proto.InternalMessageInfo

func (m *QueryAllFeeSettlementBillRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllFeeSettlementBillResponse struct {
	FeeSettlementBill []FeeSettlementBill `protobuf:"bytes,1,rep,name=FeeSettlementBill,proto3" json:"FeeSettlementBill"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFeeSettlementBillResponse) Reset()         { *m = QueryAllFeeSettlementBillResponse{} }
func (m *QueryAllFeeSettlementBillResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllFeeSettlementBillResponse) ProtoMessage()    {}
func (*QueryAllFeeSettlementBillResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3130d2b35cb8776, []int{17}
}
func (m *QueryAllFeeSettlementBillResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFeeSettlementBillResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFeeSettlementBillResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFeeSettlementBillResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFeeSettlementBillResponse.Merge(m, src)
}
func (m *QueryAllFeeSettlementBillResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFeeSettlementBillResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFeeSettlementBillResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFeeSettlementBillResponse proto.InternalMessageInfo

func (m *QueryAllFeeSettlementBillResponse) GetFeeSettlementBill() []FeeSettlementBill {
	if m != nil {
		return m.FeeSettlementBill
	}
	return nil
}

func (m *QueryAllFeeSettlementBillResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetGridInboxRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetGridInboxRequest) Reset()         { *m = QueryGetGridInboxRequest{} }
func (m *QueryGetGridInboxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGridInboxRequest) ProtoMessage()    {}
func (*QueryGetGridInboxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3130d2b35cb8776, []int{18}
}
func (m *QueryGetGridInboxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGridInboxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGridInboxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGridInboxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGridInboxRequest.Merge(m, src)
}
func (m *QueryGetGridInboxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGridInboxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGridInboxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGridInboxRequest proto.InternalMessageInfo

func (m *QueryGetGridInboxRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetGridInboxResponse struct {
	GridInbox GridInbox `protobuf:"bytes,1,opt,name=GridInbox,proto3" json:"GridInbox"`
}

func (m *QueryGetGridInboxResponse) Reset()         { *m = QueryGetGridInboxResponse{} }
func (m *QueryGetGridInboxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetGridInboxResponse) ProtoMessage()    {}
func (*QueryGetGridInboxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3130d2b35cb8776, []int{19}
}
func (m *QueryGetGridInboxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGridInboxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGridInboxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGridInboxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGridInboxResponse.Merge(m, src)
}
func (m *QueryGetGridInboxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGridInboxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGridInboxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGridInboxResponse proto.InternalMessageInfo

func (m *QueryGetGridInboxResponse) GetGridInbox() GridInbox {
	if m != nil {
		return m.GridInbox
	}
	return GridInbox{}
}

type QueryAllGridInboxRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGridInboxRequest) Reset()         { *m = QueryAllGridInboxRequest{} }
func (m *QueryAllGridInboxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllGridInboxRequest) ProtoMessage()    {}
func (*QueryAllGridInboxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3130d2b35cb8776, []int{20}
}
func (m *QueryAllGridInboxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGridInboxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGridInboxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGridInboxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGridInboxRequest.Merge(m, src)
}
func (m *QueryAllGridInboxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGridInboxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGridInboxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGridInboxRequest proto.InternalMessageInfo

func (m *QueryAllGridInboxRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllGridInboxResponse struct {
	GridInbox  []GridInbox         `protobuf:"bytes,1,rep,name=GridInbox,proto3" json:"GridInbox"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGridInboxResponse) Reset()         { *m = QueryAllGridInboxResponse{} }
func (m *QueryAllGridInboxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllGridInboxResponse) ProtoMessage()    {}
func (*QueryAllGridInboxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3130d2b35cb8776, []int{21}
}
func (m *QueryAllGridInboxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGridInboxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGridInboxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGridInboxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGridInboxResponse.Merge(m, src)
}
func (m *QueryAllGridInboxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGridInboxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGridInboxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGridInboxResponse proto.InternalMessageInfo

func (m *QueryAllGridInboxResponse) GetGridInbox() []GridInbox {
	if m != nil {
		return m.GridInbox
	}
	return nil
}

func (m *QueryAllGridInboxResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "hypergridssn.hypergridssn.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "hypergridssn.hypergridssn.QueryParamsResponse")
	proto.RegisterType((*QueryGetSolanaAccountRequest)(nil), "hypergridssn.hypergridssn.QueryGetSolanaAccountRequest")
	proto.RegisterType((*QueryGetSolanaAccountResponse)(nil), "hypergridssn.hypergridssn.QueryGetSolanaAccountResponse")
	proto.RegisterType((*QueryAllSolanaAccountRequest)(nil), "hypergridssn.hypergridssn.QueryAllSolanaAccountRequest")
	proto.RegisterType((*QueryAllSolanaAccountResponse)(nil), "hypergridssn.hypergridssn.QueryAllSolanaAccountResponse")
	proto.RegisterType((*QueryGetGridBlockFeeRequest)(nil), "hypergridssn.hypergridssn.QueryGetGridBlockFeeRequest")
	proto.RegisterType((*QueryGetGridBlockFeeResponse)(nil), "hypergridssn.hypergridssn.QueryGetGridBlockFeeResponse")
	proto.RegisterType((*QueryAllGridBlockFeeRequest)(nil), "hypergridssn.hypergridssn.QueryAllGridBlockFeeRequest")
	proto.RegisterType((*QueryAllGridBlockFeeResponse)(nil), "hypergridssn.hypergridssn.QueryAllGridBlockFeeResponse")
	proto.RegisterType((*QueryGetHypergridNodeRequest)(nil), "hypergridssn.hypergridssn.QueryGetHypergridNodeRequest")
	proto.RegisterType((*QueryGetHypergridNodeResponse)(nil), "hypergridssn.hypergridssn.QueryGetHypergridNodeResponse")
	proto.RegisterType((*QueryAllHypergridNodeRequest)(nil), "hypergridssn.hypergridssn.QueryAllHypergridNodeRequest")
	proto.RegisterType((*QueryAllHypergridNodeResponse)(nil), "hypergridssn.hypergridssn.QueryAllHypergridNodeResponse")
	proto.RegisterType((*QueryGetFeeSettlementBillRequest)(nil), "hypergridssn.hypergridssn.QueryGetFeeSettlementBillRequest")
	proto.RegisterType((*QueryGetFeeSettlementBillResponse)(nil), "hypergridssn.hypergridssn.QueryGetFeeSettlementBillResponse")
	proto.RegisterType((*QueryAllFeeSettlementBillRequest)(nil), "hypergridssn.hypergridssn.QueryAllFeeSettlementBillRequest")
	proto.RegisterType((*QueryAllFeeSettlementBillResponse)(nil), "hypergridssn.hypergridssn.QueryAllFeeSettlementBillResponse")
	proto.RegisterType((*QueryGetGridInboxRequest)(nil), "hypergridssn.hypergridssn.QueryGetGridInboxRequest")
	proto.RegisterType((*QueryGetGridInboxResponse)(nil), "hypergridssn.hypergridssn.QueryGetGridInboxResponse")
	proto.RegisterType((*QueryAllGridInboxRequest)(nil), "hypergridssn.hypergridssn.QueryAllGridInboxRequest")
	proto.RegisterType((*QueryAllGridInboxResponse)(nil), "hypergridssn.hypergridssn.QueryAllGridInboxResponse")
}

func init() {
	proto.RegisterFile("hypergridssn/hypergridssn/query.proto", fileDescriptor_b3130d2b35cb8776)
}

var fileDescriptor_b3130d2b35cb8776 = []byte{
	// 1075 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0xd8, 0x25, 0x28, 0x03, 0x81, 0x76, 0x88, 0x50, 0x6a, 0x8a, 0x69, 0x57, 0x25, 0x8d,
	0x4c, 0xb3, 0xab, 0xc4, 0x25, 0x41, 0x6a, 0x84, 0xb0, 0x85, 0x92, 0x72, 0x41, 0xad, 0xcb, 0x09,
	0x0e, 0x66, 0x9d, 0x9d, 0xb8, 0x4b, 0x27, 0x3b, 0x8e, 0x77, 0x5d, 0x35, 0x8a, 0x72, 0x41, 0xe2,
	0x8a, 0x90, 0xfa, 0x4f, 0x80, 0x90, 0x10, 0x27, 0x04, 0x1c, 0xe0, 0x5a, 0x55, 0x08, 0x55, 0xe2,
	0xc2, 0x09, 0xa1, 0x04, 0x89, 0x7f, 0x03, 0xed, 0xcc, 0xdb, 0x78, 0x07, 0xef, 0xec, 0x4e, 0x92,
	0xed, 0x25, 0xf1, 0xec, 0xbc, 0xf7, 0xe6, 0xfb, 0xde, 0x8f, 0xd9, 0xcf, 0xc6, 0x6f, 0xde, 0xdb,
	0x1b, 0xd0, 0x61, 0x7f, 0xe8, 0x7b, 0x61, 0x18, 0x38, 0xca, 0x62, 0x77, 0x44, 0x87, 0x7b, 0xf6,
	0x60, 0xc8, 0x23, 0x4e, 0x2e, 0xa6, 0x77, 0xec, 0xf4, 0xa2, 0x76, 0xc1, 0xdd, 0xf1, 0x03, 0xee,
	0x88, 0xbf, 0xd2, 0xba, 0x36, 0xd7, 0xe7, 0x7d, 0x2e, 0x3e, 0x3a, 0xf1, 0x27, 0x78, 0x7a, 0xa9,
	0xcf, 0x79, 0x9f, 0x51, 0xc7, 0x1d, 0xf8, 0x8e, 0x1b, 0x04, 0x3c, 0x72, 0x23, 0x9f, 0x07, 0x21,
	0xec, 0x36, 0xb6, 0x78, 0xb8, 0xc3, 0x43, 0xa7, 0xe7, 0x86, 0x54, 0x1e, 0xed, 0x3c, 0x58, 0xee,
	0xd1, 0xc8, 0x5d, 0x76, 0x06, 0x6e, 0xdf, 0x0f, 0x84, 0x31, 0xd8, 0x2e, 0xe8, 0x41, 0x0f, 0xdc,
	0xa1, 0xbb, 0x93, 0xc4, 0xb4, 0xf5, 0x76, 0x21, 0x67, 0x6e, 0xe0, 0x76, 0xdd, 0xad, 0x2d, 0x3e,
	0x0a, 0xa2, 0x62, 0xfb, 0xf8, 0x7f, 0xb7, 0xc7, 0xf8, 0xd6, 0xfd, 0xee, 0x36, 0xa5, 0xc5, 0xf6,
	0xc7, 0x8b, 0x6e, 0xc0, 0xbd, 0xc4, 0xbe, 0xa9, 0xb7, 0xdf, 0xa6, 0xb4, 0x1b, 0xd2, 0x28, 0x62,
	0x74, 0x87, 0x06, 0x51, 0xb7, 0xe7, 0x33, 0x96, 0x24, 0xa6, 0x00, 0x94, 0x1f, 0xf4, 0xf8, 0x43,
	0x69, 0x6b, 0xcd, 0x61, 0x72, 0x27, 0x4e, 0xdd, 0x6d, 0x91, 0x85, 0x0e, 0xdd, 0x1d, 0xd1, 0x30,
	0xb2, 0x3e, 0xc1, 0xaf, 0x28, 0x4f, 0xc3, 0x01, 0x0f, 0x42, 0x4a, 0xde, 0xc7, 0xd3, 0x32, 0x5b,
	0xf3, 0xe8, 0x32, 0x5a, 0x7c, 0x61, 0xe5, 0x8a, 0xad, 0x2d, 0xb2, 0x2d, 0x5d, 0xdb, 0x33, 0x8f,
	0xff, 0x7a, 0x63, 0xea, 0xeb, 0x7f, 0xbf, 0x6f, 0xa0, 0x0e, 0xf8, 0x5a, 0x1d, 0x7c, 0x49, 0x04,
	0xdf, 0xa4, 0xd1, 0x5d, 0x91, 0xd3, 0x96, 0x4c, 0x29, 0x1c, 0x4e, 0xe6, 0xf1, 0xf3, 0xae, 0xe7,
	0x0d, 0x69, 0x28, 0x8f, 0x99, 0xe9, 0x24, 0xcb, 0x78, 0xe7, 0x01, 0x1d, 0x86, 0x3e, 0x0f, 0xe6,
	0x2b, 0x72, 0x07, 0x96, 0xd6, 0x08, 0xbf, 0xae, 0x89, 0x09, 0xd0, 0x3f, 0xc2, 0xb3, 0x61, 0x7a,
	0x03, 0x18, 0x2c, 0xe6, 0x30, 0x50, 0x02, 0xb5, 0xcf, 0xc5, 0x44, 0x3a, 0x6a, 0x10, 0x6b, 0x1b,
	0xa8, 0xb4, 0x18, 0xcb, 0xa4, 0xb2, 0x81, 0xf1, 0xb8, 0x15, 0xe1, 0xc8, 0x05, 0x5b, 0xf6, 0xad,
	0x1d, 0xf7, 0xad, 0x2d, 0x47, 0x06, 0xfa, 0xd6, 0xbe, 0xed, 0xf6, 0x29, 0xf8, 0x76, 0x52, 0x9e,
	0xd6, 0x2f, 0x08, 0xf8, 0x4d, 0x1e, 0xa4, 0xe7, 0x57, 0x3d, 0x33, 0x3f, 0xb2, 0xa9, 0xe0, 0xaf,
	0x08, 0xfc, 0xd7, 0x0a, 0xf1, 0x4b, 0x48, 0x0a, 0x81, 0x25, 0xfc, 0x5a, 0x52, 0x9f, 0xcd, 0xa1,
	0xef, 0xb5, 0xe3, 0xb1, 0xd8, 0xa0, 0x09, 0x57, 0xf2, 0x12, 0xae, 0xf8, 0x9e, 0xc8, 0xcf, 0xb9,
	0x4e, 0xc5, 0xf7, 0xac, 0xdd, 0x71, 0x8b, 0xa8, 0xe6, 0xc0, 0xf6, 0x0e, 0x7e, 0x31, 0xfd, 0x1c,
	0x32, 0x7b, 0x2d, 0x87, 0x6c, 0xda, 0x1c, 0xb8, 0x2a, 0x21, 0x2c, 0x0a, 0x08, 0x5b, 0x8c, 0x65,
	0x21, 0x2c, 0xab, 0x92, 0x3f, 0xa3, 0x71, 0xcb, 0x18, 0x52, 0xab, 0x9e, 0x91, 0x5a, 0x79, 0x55,
	0x5c, 0x1d, 0x97, 0xe5, 0x56, 0x82, 0xe0, 0x43, 0xee, 0x1d, 0x27, 0xe9, 0x55, 0x3c, 0x3d, 0x18,
	0xf5, 0xee, 0xd3, 0x3d, 0x18, 0x5c, 0x58, 0xa5, 0xa7, 0xf3, 0x7f, 0x7e, 0xe3, 0xee, 0xbd, 0x97,
	0xde, 0x30, 0x98, 0x4e, 0x25, 0x50, 0xd2, 0xbd, 0x4a, 0x90, 0xf4, 0x74, 0x66, 0xc2, 0x7d, 0x16,
	0xd3, 0x69, 0xcc, 0xaf, 0x7a, 0x66, 0x7e, 0xe5, 0xd5, 0x75, 0x05, 0x5f, 0x4e, 0xea, 0xb3, 0x41,
	0xe9, 0xdd, 0xe3, 0x97, 0x4a, 0xdb, 0x67, 0x4c, 0x37, 0xa2, 0x5f, 0x20, 0x7c, 0x25, 0xc7, 0x09,
	0x88, 0x7f, 0x8a, 0x2f, 0x4c, 0x6c, 0x42, 0xa6, 0xaf, 0xe7, 0x90, 0x9f, 0xf0, 0x81, 0x04, 0x4c,
	0x06, 0xb3, 0x3e, 0x03, 0xec, 0x2d, 0xc6, 0xb4, 0xd8, 0xcb, 0x2a, 0xf4, 0xef, 0x09, 0xe7, 0xec,
	0xc3, 0xf2, 0x39, 0x57, 0x4b, 0xe3, 0x5c, 0x5e, 0xe1, 0x1b, 0x78, 0x3e, 0x7d, 0xcf, 0x7e, 0x10,
	0x0b, 0x03, 0x5d, 0xc1, 0x29, 0xbe, 0x98, 0x61, 0x0b, 0x9c, 0x6f, 0xe1, 0x99, 0xe3, 0x87, 0x90,
	0xe0, 0xab, 0x05, 0x57, 0x96, 0xb0, 0x05, 0x8e, 0x63, 0x67, 0xab, 0x07, 0x90, 0xe0, 0x7e, 0x54,
	0x20, 0x95, 0x55, 0xc7, 0xef, 0x10, 0x70, 0x51, 0x0f, 0xc9, 0xe6, 0x52, 0x3d, 0x35, 0x97, 0xd2,
	0xea, 0xb4, 0xf2, 0xe5, 0x79, 0xfc, 0x9c, 0x00, 0x4c, 0x1e, 0x21, 0x3c, 0x2d, 0xa5, 0x15, 0x59,
	0xca, 0x01, 0x35, 0xa9, 0xe9, 0x6a, 0xb6, 0xa9, 0xb9, 0x3c, 0xdf, 0x6a, 0x7c, 0xfe, 0xc7, 0x3f,
	0x8f, 0x2a, 0x57, 0x89, 0x35, 0x56, 0x90, 0x4b, 0x1a, 0xf1, 0x4c, 0x9e, 0x20, 0x3c, 0xab, 0xc8,
	0x09, 0xb2, 0x56, 0x74, 0x9a, 0x46, 0xfd, 0xd5, 0xde, 0x39, 0xb9, 0x23, 0x00, 0xde, 0x10, 0x80,
	0xdf, 0x23, 0xef, 0xe6, 0x01, 0x56, 0x55, 0xbc, 0xb3, 0x0f, 0xd2, 0xf2, 0xc0, 0xd9, 0x07, 0x29,
	0x79, 0x40, 0x7e, 0x42, 0xf8, 0xbc, 0x72, 0x42, 0x8b, 0xb1, 0x62, 0x3e, 0x1a, 0x09, 0x58, 0xcc,
	0x47, 0x27, 0xe9, 0xac, 0x15, 0xc1, 0xe7, 0x3a, 0x69, 0x98, 0xf3, 0x21, 0x3f, 0x22, 0x55, 0x3e,
	0x90, 0x55, 0x83, 0x74, 0x66, 0xe8, 0x9d, 0xda, 0xda, 0x89, 0xfd, 0x00, 0xf5, 0x9a, 0x40, 0xbd,
	0x4c, 0x9c, 0x3c, 0xd4, 0xea, 0x77, 0x23, 0x67, 0xdf, 0xf7, 0x0e, 0xc8, 0x0f, 0x08, 0xbf, 0x9c,
	0x8e, 0x18, 0x67, 0x7d, 0xd5, 0x20, 0x79, 0xa7, 0x42, 0xaf, 0x51, 0x5f, 0x66, 0x39, 0x57, 0xd1,
	0x93, 0x5f, 0x11, 0x9e, 0x55, 0xde, 0xd6, 0x46, 0xcd, 0x9f, 0xa5, 0x48, 0x8c, 0x9a, 0x3f, 0x53,
	0x61, 0x58, 0x37, 0x05, 0xf0, 0xb7, 0x49, 0x33, 0x0f, 0xb8, 0xfa, 0x15, 0xd3, 0xd9, 0x97, 0xf2,
	0x4c, 0x76, 0xbc, 0x12, 0xd6, 0xb4, 0xe3, 0x4f, 0x47, 0x42, 0x27, 0x93, 0xcc, 0xb2, 0xaf, 0x92,
	0x20, 0xbf, 0xa1, 0x8c, 0xd7, 0x2d, 0xb9, 0x69, 0x90, 0x48, 0x9d, 0x5c, 0xa8, 0xad, 0x9f, 0xce,
	0x19, 0x48, 0xac, 0x0b, 0x12, 0xab, 0xe4, 0x46, 0x1e, 0x89, 0x8c, 0x2f, 0xef, 0x72, 0x0a, 0x9e,
	0x20, 0x3c, 0x37, 0x11, 0xbb, 0x65, 0xc2, 0x28, 0x47, 0x00, 0x15, 0x33, 0xca, 0x13, 0x34, 0x66,
	0x23, 0x9d, 0xc1, 0x88, 0x7c, 0x8b, 0x52, 0xaf, 0x52, 0xd2, 0x34, 0xbc, 0x52, 0xd2, 0xaf, 0xfc,
	0xda, 0x8d, 0x93, 0x39, 0x01, 0xe2, 0xa6, 0x40, 0xbc, 0x44, 0xde, 0x2a, 0x1c, 0x63, 0xf1, 0x5b,
	0x88, 0x4c, 0xfd, 0x37, 0x70, 0x77, 0x8a, 0x50, 0x71, 0xca, 0x9b, 0x86, 0xb7, 0xc8, 0xc9, 0x00,
	0x67, 0x69, 0x0e, 0xcb, 0x16, 0x80, 0x17, 0xc9, 0x82, 0x19, 0xe0, 0xf6, 0xfa, 0xe3, 0xc3, 0x3a,
	0x7a, 0x7a, 0x58, 0x47, 0x7f, 0x1f, 0xd6, 0xd1, 0x57, 0x47, 0xf5, 0xa9, 0xa7, 0x47, 0xf5, 0xa9,
	0x3f, 0x8f, 0xea, 0x53, 0x1f, 0x5b, 0x6a, 0x80, 0x87, 0x6a, 0x88, 0x68, 0x6f, 0x40, 0xc3, 0xde,
	0xb4, 0xf8, 0xed, 0xa7, 0xf9, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x26, 0xfc, 0x4f, 0xcb,
	0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of SolanaAccount items.
	SolanaAccount(ctx context.Context, in *QueryGetSolanaAccountRequest, opts ...grpc.CallOption) (*QueryGetSolanaAccountResponse, error)
	SolanaAccountAll(ctx context.Context, in *QueryAllSolanaAccountRequest, opts ...grpc.CallOption) (*QueryAllSolanaAccountResponse, error)
	// Queries a list of GridBlockFee items.
	GridBlockFee(ctx context.Context, in *QueryGetGridBlockFeeRequest, opts ...grpc.CallOption) (*QueryGetGridBlockFeeResponse, error)
	GridBlockFeeAll(ctx context.Context, in *QueryAllGridBlockFeeRequest, opts ...grpc.CallOption) (*QueryAllGridBlockFeeResponse, error)
	// Queries a list of HypergridNode items.
	HypergridNode(ctx context.Context, in *QueryGetHypergridNodeRequest, opts ...grpc.CallOption) (*QueryGetHypergridNodeResponse, error)
	HypergridNodeAll(ctx context.Context, in *QueryAllHypergridNodeRequest, opts ...grpc.CallOption) (*QueryAllHypergridNodeResponse, error)
	// Queries a list of FeeSettlementBill items.
	FeeSettlementBill(ctx context.Context, in *QueryGetFeeSettlementBillRequest, opts ...grpc.CallOption) (*QueryGetFeeSettlementBillResponse, error)
	FeeSettlementBillAll(ctx context.Context, in *QueryAllFeeSettlementBillRequest, opts ...grpc.CallOption) (*QueryAllFeeSettlementBillResponse, error)
	// Queries a list of GridInbox items.
	GridInbox(ctx context.Context, in *QueryGetGridInboxRequest, opts ...grpc.CallOption) (*QueryGetGridInboxResponse, error)
	GridInboxAll(ctx context.Context, in *QueryAllGridInboxRequest, opts ...grpc.CallOption) (*QueryAllGridInboxResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/hypergridssn.hypergridssn.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SolanaAccount(ctx context.Context, in *QueryGetSolanaAccountRequest, opts ...grpc.CallOption) (*QueryGetSolanaAccountResponse, error) {
	out := new(QueryGetSolanaAccountResponse)
	err := c.cc.Invoke(ctx, "/hypergridssn.hypergridssn.Query/SolanaAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SolanaAccountAll(ctx context.Context, in *QueryAllSolanaAccountRequest, opts ...grpc.CallOption) (*QueryAllSolanaAccountResponse, error) {
	out := new(QueryAllSolanaAccountResponse)
	err := c.cc.Invoke(ctx, "/hypergridssn.hypergridssn.Query/SolanaAccountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GridBlockFee(ctx context.Context, in *QueryGetGridBlockFeeRequest, opts ...grpc.CallOption) (*QueryGetGridBlockFeeResponse, error) {
	out := new(QueryGetGridBlockFeeResponse)
	err := c.cc.Invoke(ctx, "/hypergridssn.hypergridssn.Query/GridBlockFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GridBlockFeeAll(ctx context.Context, in *QueryAllGridBlockFeeRequest, opts ...grpc.CallOption) (*QueryAllGridBlockFeeResponse, error) {
	out := new(QueryAllGridBlockFeeResponse)
	err := c.cc.Invoke(ctx, "/hypergridssn.hypergridssn.Query/GridBlockFeeAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HypergridNode(ctx context.Context, in *QueryGetHypergridNodeRequest, opts ...grpc.CallOption) (*QueryGetHypergridNodeResponse, error) {
	out := new(QueryGetHypergridNodeResponse)
	err := c.cc.Invoke(ctx, "/hypergridssn.hypergridssn.Query/HypergridNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HypergridNodeAll(ctx context.Context, in *QueryAllHypergridNodeRequest, opts ...grpc.CallOption) (*QueryAllHypergridNodeResponse, error) {
	out := new(QueryAllHypergridNodeResponse)
	err := c.cc.Invoke(ctx, "/hypergridssn.hypergridssn.Query/HypergridNodeAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeSettlementBill(ctx context.Context, in *QueryGetFeeSettlementBillRequest, opts ...grpc.CallOption) (*QueryGetFeeSettlementBillResponse, error) {
	out := new(QueryGetFeeSettlementBillResponse)
	err := c.cc.Invoke(ctx, "/hypergridssn.hypergridssn.Query/FeeSettlementBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeSettlementBillAll(ctx context.Context, in *QueryAllFeeSettlementBillRequest, opts ...grpc.CallOption) (*QueryAllFeeSettlementBillResponse, error) {
	out := new(QueryAllFeeSettlementBillResponse)
	err := c.cc.Invoke(ctx, "/hypergridssn.hypergridssn.Query/FeeSettlementBillAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GridInbox(ctx context.Context, in *QueryGetGridInboxRequest, opts ...grpc.CallOption) (*QueryGetGridInboxResponse, error) {
	out := new(QueryGetGridInboxResponse)
	err := c.cc.Invoke(ctx, "/hypergridssn.hypergridssn.Query/GridInbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GridInboxAll(ctx context.Context, in *QueryAllGridInboxRequest, opts ...grpc.CallOption) (*QueryAllGridInboxResponse, error) {
	out := new(QueryAllGridInboxResponse)
	err := c.cc.Invoke(ctx, "/hypergridssn.hypergridssn.Query/GridInboxAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of SolanaAccount items.
	SolanaAccount(context.Context, *QueryGetSolanaAccountRequest) (*QueryGetSolanaAccountResponse, error)
	SolanaAccountAll(context.Context, *QueryAllSolanaAccountRequest) (*QueryAllSolanaAccountResponse, error)
	// Queries a list of GridBlockFee items.
	GridBlockFee(context.Context, *QueryGetGridBlockFeeRequest) (*QueryGetGridBlockFeeResponse, error)
	GridBlockFeeAll(context.Context, *QueryAllGridBlockFeeRequest) (*QueryAllGridBlockFeeResponse, error)
	// Queries a list of HypergridNode items.
	HypergridNode(context.Context, *QueryGetHypergridNodeRequest) (*QueryGetHypergridNodeResponse, error)
	HypergridNodeAll(context.Context, *QueryAllHypergridNodeRequest) (*QueryAllHypergridNodeResponse, error)
	// Queries a list of FeeSettlementBill items.
	FeeSettlementBill(context.Context, *QueryGetFeeSettlementBillRequest) (*QueryGetFeeSettlementBillResponse, error)
	FeeSettlementBillAll(context.Context, *QueryAllFeeSettlementBillRequest) (*QueryAllFeeSettlementBillResponse, error)
	// Queries a list of GridInbox items.
	GridInbox(context.Context, *QueryGetGridInboxRequest) (*QueryGetGridInboxResponse, error)
	GridInboxAll(context.Context, *QueryAllGridInboxRequest) (*QueryAllGridInboxResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) SolanaAccount(ctx context.Context, req *QueryGetSolanaAccountRequest) (*QueryGetSolanaAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolanaAccount not implemented")
}
func (*UnimplementedQueryServer) SolanaAccountAll(ctx context.Context, req *QueryAllSolanaAccountRequest) (*QueryAllSolanaAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolanaAccountAll not implemented")
}
func (*UnimplementedQueryServer) GridBlockFee(ctx context.Context, req *QueryGetGridBlockFeeRequest) (*QueryGetGridBlockFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GridBlockFee not implemented")
}
func (*UnimplementedQueryServer) GridBlockFeeAll(ctx context.Context, req *QueryAllGridBlockFeeRequest) (*QueryAllGridBlockFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GridBlockFeeAll not implemented")
}
func (*UnimplementedQueryServer) HypergridNode(ctx context.Context, req *QueryGetHypergridNodeRequest) (*QueryGetHypergridNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HypergridNode not implemented")
}
func (*UnimplementedQueryServer) HypergridNodeAll(ctx context.Context, req *QueryAllHypergridNodeRequest) (*QueryAllHypergridNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HypergridNodeAll not implemented")
}
func (*UnimplementedQueryServer) FeeSettlementBill(ctx context.Context, req *QueryGetFeeSettlementBillRequest) (*QueryGetFeeSettlementBillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeSettlementBill not implemented")
}
func (*UnimplementedQueryServer) FeeSettlementBillAll(ctx context.Context, req *QueryAllFeeSettlementBillRequest) (*QueryAllFeeSettlementBillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeSettlementBillAll not implemented")
}
func (*UnimplementedQueryServer) GridInbox(ctx context.Context, req *QueryGetGridInboxRequest) (*QueryGetGridInboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GridInbox not implemented")
}
func (*UnimplementedQueryServer) GridInboxAll(ctx context.Context, req *QueryAllGridInboxRequest) (*QueryAllGridInboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GridInboxAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypergridssn.hypergridssn.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SolanaAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSolanaAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SolanaAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypergridssn.hypergridssn.Query/SolanaAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SolanaAccount(ctx, req.(*QueryGetSolanaAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SolanaAccountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSolanaAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SolanaAccountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypergridssn.hypergridssn.Query/SolanaAccountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SolanaAccountAll(ctx, req.(*QueryAllSolanaAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GridBlockFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGridBlockFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GridBlockFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypergridssn.hypergridssn.Query/GridBlockFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GridBlockFee(ctx, req.(*QueryGetGridBlockFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GridBlockFeeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGridBlockFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GridBlockFeeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypergridssn.hypergridssn.Query/GridBlockFeeAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GridBlockFeeAll(ctx, req.(*QueryAllGridBlockFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HypergridNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHypergridNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HypergridNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypergridssn.hypergridssn.Query/HypergridNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HypergridNode(ctx, req.(*QueryGetHypergridNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HypergridNodeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllHypergridNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HypergridNodeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypergridssn.hypergridssn.Query/HypergridNodeAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HypergridNodeAll(ctx, req.(*QueryAllHypergridNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeSettlementBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFeeSettlementBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeSettlementBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypergridssn.hypergridssn.Query/FeeSettlementBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeSettlementBill(ctx, req.(*QueryGetFeeSettlementBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeSettlementBillAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFeeSettlementBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeSettlementBillAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypergridssn.hypergridssn.Query/FeeSettlementBillAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeSettlementBillAll(ctx, req.(*QueryAllFeeSettlementBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GridInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGridInboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GridInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypergridssn.hypergridssn.Query/GridInbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GridInbox(ctx, req.(*QueryGetGridInboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GridInboxAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGridInboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GridInboxAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypergridssn.hypergridssn.Query/GridInboxAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GridInboxAll(ctx, req.(*QueryAllGridInboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hypergridssn.hypergridssn.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "SolanaAccount",
			Handler:    _Query_SolanaAccount_Handler,
		},
		{
			MethodName: "SolanaAccountAll",
			Handler:    _Query_SolanaAccountAll_Handler,
		},
		{
			MethodName: "GridBlockFee",
			Handler:    _Query_GridBlockFee_Handler,
		},
		{
			MethodName: "GridBlockFeeAll",
			Handler:    _Query_GridBlockFeeAll_Handler,
		},
		{
			MethodName: "HypergridNode",
			Handler:    _Query_HypergridNode_Handler,
		},
		{
			MethodName: "HypergridNodeAll",
			Handler:    _Query_HypergridNodeAll_Handler,
		},
		{
			MethodName: "FeeSettlementBill",
			Handler:    _Query_FeeSettlementBill_Handler,
		},
		{
			MethodName: "FeeSettlementBillAll",
			Handler:    _Query_FeeSettlementBillAll_Handler,
		},
		{
			MethodName: "GridInbox",
			Handler:    _Query_GridInbox_Handler,
		},
		{
			MethodName: "GridInboxAll",
			Handler:    _Query_GridInboxAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hypergridssn/hypergridssn/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetSolanaAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSolanaAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSolanaAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSolanaAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSolanaAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSolanaAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SolanaAccount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSolanaAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSolanaAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSolanaAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSolanaAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSolanaAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSolanaAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SolanaAccount) > 0 {
		for iNdEx := len(m.SolanaAccount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SolanaAccount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGridBlockFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGridBlockFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGridBlockFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGridBlockFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGridBlockFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGridBlockFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GridBlockFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllGridBlockFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGridBlockFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGridBlockFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGridBlockFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGridBlockFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGridBlockFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.GridBlockFee) > 0 {
		for iNdEx := len(m.GridBlockFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GridBlockFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHypergridNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHypergridNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHypergridNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHypergridNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHypergridNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHypergridNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.HypergridNode.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllHypergridNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHypergridNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHypergridNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllHypergridNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHypergridNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHypergridNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.HypergridNode) > 0 {
		for iNdEx := len(m.HypergridNode) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HypergridNode[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFeeSettlementBillRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFeeSettlementBillRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFeeSettlementBillRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFeeSettlementBillResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFeeSettlementBillResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFeeSettlementBillResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FeeSettlementBill.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllFeeSettlementBillRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFeeSettlementBillRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFeeSettlementBillRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFeeSettlementBillResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFeeSettlementBillResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFeeSettlementBillResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeeSettlementBill) > 0 {
		for iNdEx := len(m.FeeSettlementBill) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeSettlementBill[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGridInboxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGridInboxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGridInboxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGridInboxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGridInboxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGridInboxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GridInbox.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllGridInboxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGridInboxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGridInboxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGridInboxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGridInboxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGridInboxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.GridInbox) > 0 {
		for iNdEx := len(m.GridInbox) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GridInbox[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetSolanaAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSolanaAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SolanaAccount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSolanaAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSolanaAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SolanaAccount) > 0 {
		for _, e := range m.SolanaAccount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGridBlockFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetGridBlockFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GridBlockFee.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllGridBlockFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGridBlockFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GridBlockFee) > 0 {
		for _, e := range m.GridBlockFee {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHypergridNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHypergridNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.HypergridNode.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllHypergridNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllHypergridNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HypergridNode) > 0 {
		for _, e := range m.HypergridNode {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetFeeSettlementBillRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetFeeSettlementBillResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FeeSettlementBill.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllFeeSettlementBillRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllFeeSettlementBillResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeeSettlementBill) > 0 {
		for _, e := range m.FeeSettlementBill {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGridInboxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetGridInboxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GridInbox.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllGridInboxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGridInboxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GridInbox) > 0 {
		for _, e := range m.GridInbox {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSolanaAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSolanaAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSolanaAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSolanaAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSolanaAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSolanaAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SolanaAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SolanaAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSolanaAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSolanaAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSolanaAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSolanaAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSolanaAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSolanaAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SolanaAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SolanaAccount = append(m.SolanaAccount, SolanaAccount{})
			if err := m.SolanaAccount[len(m.SolanaAccount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGridBlockFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGridBlockFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGridBlockFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGridBlockFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGridBlockFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGridBlockFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GridBlockFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GridBlockFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGridBlockFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGridBlockFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGridBlockFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGridBlockFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGridBlockFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGridBlockFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GridBlockFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GridBlockFee = append(m.GridBlockFee, GridBlockFee{})
			if err := m.GridBlockFee[len(m.GridBlockFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHypergridNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHypergridNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHypergridNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHypergridNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHypergridNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHypergridNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HypergridNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HypergridNode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHypergridNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHypergridNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHypergridNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHypergridNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHypergridNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHypergridNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HypergridNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HypergridNode = append(m.HypergridNode, HypergridNode{})
			if err := m.HypergridNode[len(m.HypergridNode)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFeeSettlementBillRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFeeSettlementBillRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFeeSettlementBillRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFeeSettlementBillResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFeeSettlementBillResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFeeSettlementBillResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeSettlementBill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeSettlementBill.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFeeSettlementBillRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFeeSettlementBillRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFeeSettlementBillRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFeeSettlementBillResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFeeSettlementBillResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFeeSettlementBillResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeSettlementBill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeSettlementBill = append(m.FeeSettlementBill, FeeSettlementBill{})
			if err := m.FeeSettlementBill[len(m.FeeSettlementBill)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGridInboxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGridInboxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGridInboxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGridInboxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGridInboxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGridInboxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GridInbox", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GridInbox.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGridInboxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGridInboxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGridInboxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGridInboxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGridInboxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGridInboxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GridInbox", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GridInbox = append(m.GridInbox, GridInbox{})
			if err := m.GridInbox[len(m.GridInbox)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
