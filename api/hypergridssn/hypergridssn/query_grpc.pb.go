// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: hypergridssn/hypergridssn/query.proto

package hypergridssn

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName               = "/hypergridssn.hypergridssn.Query/Params"
	Query_SolanaAccount_FullMethodName        = "/hypergridssn.hypergridssn.Query/SolanaAccount"
	Query_SolanaAccountAll_FullMethodName     = "/hypergridssn.hypergridssn.Query/SolanaAccountAll"
	Query_GridBlockFee_FullMethodName         = "/hypergridssn.hypergridssn.Query/GridBlockFee"
	Query_GridBlockFeeAll_FullMethodName      = "/hypergridssn.hypergridssn.Query/GridBlockFeeAll"
	Query_HypergridNode_FullMethodName        = "/hypergridssn.hypergridssn.Query/HypergridNode"
	Query_HypergridNodeAll_FullMethodName     = "/hypergridssn.hypergridssn.Query/HypergridNodeAll"
	Query_FeeSettlementBill_FullMethodName    = "/hypergridssn.hypergridssn.Query/FeeSettlementBill"
	Query_FeeSettlementBillAll_FullMethodName = "/hypergridssn.hypergridssn.Query/FeeSettlementBillAll"
	Query_GridInbox_FullMethodName            = "/hypergridssn.hypergridssn.Query/GridInbox"
	Query_GridInboxAll_FullMethodName         = "/hypergridssn.hypergridssn.Query/GridInboxAll"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of SolanaAccount items.
	SolanaAccount(ctx context.Context, in *QueryGetSolanaAccountRequest, opts ...grpc.CallOption) (*QueryGetSolanaAccountResponse, error)
	SolanaAccountAll(ctx context.Context, in *QueryAllSolanaAccountRequest, opts ...grpc.CallOption) (*QueryAllSolanaAccountResponse, error)
	// Queries a list of GridBlockFee items.
	GridBlockFee(ctx context.Context, in *QueryGetGridBlockFeeRequest, opts ...grpc.CallOption) (*QueryGetGridBlockFeeResponse, error)
	GridBlockFeeAll(ctx context.Context, in *QueryAllGridBlockFeeRequest, opts ...grpc.CallOption) (*QueryAllGridBlockFeeResponse, error)
	// Queries a list of HypergridNode items.
	HypergridNode(ctx context.Context, in *QueryGetHypergridNodeRequest, opts ...grpc.CallOption) (*QueryGetHypergridNodeResponse, error)
	HypergridNodeAll(ctx context.Context, in *QueryAllHypergridNodeRequest, opts ...grpc.CallOption) (*QueryAllHypergridNodeResponse, error)
	// Queries a list of FeeSettlementBill items.
	FeeSettlementBill(ctx context.Context, in *QueryGetFeeSettlementBillRequest, opts ...grpc.CallOption) (*QueryGetFeeSettlementBillResponse, error)
	FeeSettlementBillAll(ctx context.Context, in *QueryAllFeeSettlementBillRequest, opts ...grpc.CallOption) (*QueryAllFeeSettlementBillResponse, error)
	// Queries a list of GridInbox items.
	GridInbox(ctx context.Context, in *QueryGetGridInboxRequest, opts ...grpc.CallOption) (*QueryGetGridInboxResponse, error)
	GridInboxAll(ctx context.Context, in *QueryAllGridInboxRequest, opts ...grpc.CallOption) (*QueryAllGridInboxResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SolanaAccount(ctx context.Context, in *QueryGetSolanaAccountRequest, opts ...grpc.CallOption) (*QueryGetSolanaAccountResponse, error) {
	out := new(QueryGetSolanaAccountResponse)
	err := c.cc.Invoke(ctx, Query_SolanaAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SolanaAccountAll(ctx context.Context, in *QueryAllSolanaAccountRequest, opts ...grpc.CallOption) (*QueryAllSolanaAccountResponse, error) {
	out := new(QueryAllSolanaAccountResponse)
	err := c.cc.Invoke(ctx, Query_SolanaAccountAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GridBlockFee(ctx context.Context, in *QueryGetGridBlockFeeRequest, opts ...grpc.CallOption) (*QueryGetGridBlockFeeResponse, error) {
	out := new(QueryGetGridBlockFeeResponse)
	err := c.cc.Invoke(ctx, Query_GridBlockFee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GridBlockFeeAll(ctx context.Context, in *QueryAllGridBlockFeeRequest, opts ...grpc.CallOption) (*QueryAllGridBlockFeeResponse, error) {
	out := new(QueryAllGridBlockFeeResponse)
	err := c.cc.Invoke(ctx, Query_GridBlockFeeAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HypergridNode(ctx context.Context, in *QueryGetHypergridNodeRequest, opts ...grpc.CallOption) (*QueryGetHypergridNodeResponse, error) {
	out := new(QueryGetHypergridNodeResponse)
	err := c.cc.Invoke(ctx, Query_HypergridNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HypergridNodeAll(ctx context.Context, in *QueryAllHypergridNodeRequest, opts ...grpc.CallOption) (*QueryAllHypergridNodeResponse, error) {
	out := new(QueryAllHypergridNodeResponse)
	err := c.cc.Invoke(ctx, Query_HypergridNodeAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeSettlementBill(ctx context.Context, in *QueryGetFeeSettlementBillRequest, opts ...grpc.CallOption) (*QueryGetFeeSettlementBillResponse, error) {
	out := new(QueryGetFeeSettlementBillResponse)
	err := c.cc.Invoke(ctx, Query_FeeSettlementBill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeSettlementBillAll(ctx context.Context, in *QueryAllFeeSettlementBillRequest, opts ...grpc.CallOption) (*QueryAllFeeSettlementBillResponse, error) {
	out := new(QueryAllFeeSettlementBillResponse)
	err := c.cc.Invoke(ctx, Query_FeeSettlementBillAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GridInbox(ctx context.Context, in *QueryGetGridInboxRequest, opts ...grpc.CallOption) (*QueryGetGridInboxResponse, error) {
	out := new(QueryGetGridInboxResponse)
	err := c.cc.Invoke(ctx, Query_GridInbox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GridInboxAll(ctx context.Context, in *QueryAllGridInboxRequest, opts ...grpc.CallOption) (*QueryAllGridInboxResponse, error) {
	out := new(QueryAllGridInboxResponse)
	err := c.cc.Invoke(ctx, Query_GridInboxAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of SolanaAccount items.
	SolanaAccount(context.Context, *QueryGetSolanaAccountRequest) (*QueryGetSolanaAccountResponse, error)
	SolanaAccountAll(context.Context, *QueryAllSolanaAccountRequest) (*QueryAllSolanaAccountResponse, error)
	// Queries a list of GridBlockFee items.
	GridBlockFee(context.Context, *QueryGetGridBlockFeeRequest) (*QueryGetGridBlockFeeResponse, error)
	GridBlockFeeAll(context.Context, *QueryAllGridBlockFeeRequest) (*QueryAllGridBlockFeeResponse, error)
	// Queries a list of HypergridNode items.
	HypergridNode(context.Context, *QueryGetHypergridNodeRequest) (*QueryGetHypergridNodeResponse, error)
	HypergridNodeAll(context.Context, *QueryAllHypergridNodeRequest) (*QueryAllHypergridNodeResponse, error)
	// Queries a list of FeeSettlementBill items.
	FeeSettlementBill(context.Context, *QueryGetFeeSettlementBillRequest) (*QueryGetFeeSettlementBillResponse, error)
	FeeSettlementBillAll(context.Context, *QueryAllFeeSettlementBillRequest) (*QueryAllFeeSettlementBillResponse, error)
	// Queries a list of GridInbox items.
	GridInbox(context.Context, *QueryGetGridInboxRequest) (*QueryGetGridInboxResponse, error)
	GridInboxAll(context.Context, *QueryAllGridInboxRequest) (*QueryAllGridInboxResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) SolanaAccount(context.Context, *QueryGetSolanaAccountRequest) (*QueryGetSolanaAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolanaAccount not implemented")
}
func (UnimplementedQueryServer) SolanaAccountAll(context.Context, *QueryAllSolanaAccountRequest) (*QueryAllSolanaAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolanaAccountAll not implemented")
}
func (UnimplementedQueryServer) GridBlockFee(context.Context, *QueryGetGridBlockFeeRequest) (*QueryGetGridBlockFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GridBlockFee not implemented")
}
func (UnimplementedQueryServer) GridBlockFeeAll(context.Context, *QueryAllGridBlockFeeRequest) (*QueryAllGridBlockFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GridBlockFeeAll not implemented")
}
func (UnimplementedQueryServer) HypergridNode(context.Context, *QueryGetHypergridNodeRequest) (*QueryGetHypergridNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HypergridNode not implemented")
}
func (UnimplementedQueryServer) HypergridNodeAll(context.Context, *QueryAllHypergridNodeRequest) (*QueryAllHypergridNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HypergridNodeAll not implemented")
}
func (UnimplementedQueryServer) FeeSettlementBill(context.Context, *QueryGetFeeSettlementBillRequest) (*QueryGetFeeSettlementBillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeSettlementBill not implemented")
}
func (UnimplementedQueryServer) FeeSettlementBillAll(context.Context, *QueryAllFeeSettlementBillRequest) (*QueryAllFeeSettlementBillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeSettlementBillAll not implemented")
}
func (UnimplementedQueryServer) GridInbox(context.Context, *QueryGetGridInboxRequest) (*QueryGetGridInboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GridInbox not implemented")
}
func (UnimplementedQueryServer) GridInboxAll(context.Context, *QueryAllGridInboxRequest) (*QueryAllGridInboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GridInboxAll not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SolanaAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSolanaAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SolanaAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SolanaAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SolanaAccount(ctx, req.(*QueryGetSolanaAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SolanaAccountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSolanaAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SolanaAccountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SolanaAccountAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SolanaAccountAll(ctx, req.(*QueryAllSolanaAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GridBlockFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGridBlockFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GridBlockFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GridBlockFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GridBlockFee(ctx, req.(*QueryGetGridBlockFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GridBlockFeeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGridBlockFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GridBlockFeeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GridBlockFeeAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GridBlockFeeAll(ctx, req.(*QueryAllGridBlockFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HypergridNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHypergridNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HypergridNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_HypergridNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HypergridNode(ctx, req.(*QueryGetHypergridNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HypergridNodeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllHypergridNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HypergridNodeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_HypergridNodeAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HypergridNodeAll(ctx, req.(*QueryAllHypergridNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeSettlementBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFeeSettlementBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeSettlementBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_FeeSettlementBill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeSettlementBill(ctx, req.(*QueryGetFeeSettlementBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeSettlementBillAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFeeSettlementBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeSettlementBillAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_FeeSettlementBillAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeSettlementBillAll(ctx, req.(*QueryAllFeeSettlementBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GridInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGridInboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GridInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GridInbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GridInbox(ctx, req.(*QueryGetGridInboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GridInboxAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGridInboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GridInboxAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GridInboxAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GridInboxAll(ctx, req.(*QueryAllGridInboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hypergridssn.hypergridssn.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "SolanaAccount",
			Handler:    _Query_SolanaAccount_Handler,
		},
		{
			MethodName: "SolanaAccountAll",
			Handler:    _Query_SolanaAccountAll_Handler,
		},
		{
			MethodName: "GridBlockFee",
			Handler:    _Query_GridBlockFee_Handler,
		},
		{
			MethodName: "GridBlockFeeAll",
			Handler:    _Query_GridBlockFeeAll_Handler,
		},
		{
			MethodName: "HypergridNode",
			Handler:    _Query_HypergridNode_Handler,
		},
		{
			MethodName: "HypergridNodeAll",
			Handler:    _Query_HypergridNodeAll_Handler,
		},
		{
			MethodName: "FeeSettlementBill",
			Handler:    _Query_FeeSettlementBill_Handler,
		},
		{
			MethodName: "FeeSettlementBillAll",
			Handler:    _Query_FeeSettlementBillAll_Handler,
		},
		{
			MethodName: "GridInbox",
			Handler:    _Query_GridInbox_Handler,
		},
		{
			MethodName: "GridInboxAll",
			Handler:    _Query_GridInboxAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hypergridssn/hypergridssn/query.proto",
}
