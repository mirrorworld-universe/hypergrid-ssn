// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: hypergridssn/hypergridssn/tx.proto

package hypergridssn

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName            = "/hypergridssn.hypergridssn.Msg/UpdateParams"
	Msg_CreateSolanaAccount_FullMethodName     = "/hypergridssn.hypergridssn.Msg/CreateSolanaAccount"
	Msg_UpdateSolanaAccount_FullMethodName     = "/hypergridssn.hypergridssn.Msg/UpdateSolanaAccount"
	Msg_DeleteSolanaAccount_FullMethodName     = "/hypergridssn.hypergridssn.Msg/DeleteSolanaAccount"
	Msg_CreateGridBlockFee_FullMethodName      = "/hypergridssn.hypergridssn.Msg/CreateGridBlockFee"
	Msg_CreateHypergridNode_FullMethodName     = "/hypergridssn.hypergridssn.Msg/CreateHypergridNode"
	Msg_UpdateHypergridNode_FullMethodName     = "/hypergridssn.hypergridssn.Msg/UpdateHypergridNode"
	Msg_DeleteHypergridNode_FullMethodName     = "/hypergridssn.hypergridssn.Msg/DeleteHypergridNode"
	Msg_CreateFeeSettlementBill_FullMethodName = "/hypergridssn.hypergridssn.Msg/CreateFeeSettlementBill"
	Msg_CreateGridInbox_FullMethodName         = "/hypergridssn.hypergridssn.Msg/CreateGridInbox"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateSolanaAccount(ctx context.Context, in *MsgCreateSolanaAccount, opts ...grpc.CallOption) (*MsgCreateSolanaAccountResponse, error)
	UpdateSolanaAccount(ctx context.Context, in *MsgUpdateSolanaAccount, opts ...grpc.CallOption) (*MsgUpdateSolanaAccountResponse, error)
	DeleteSolanaAccount(ctx context.Context, in *MsgDeleteSolanaAccount, opts ...grpc.CallOption) (*MsgDeleteSolanaAccountResponse, error)
	CreateGridBlockFee(ctx context.Context, in *MsgCreateGridBlockFee, opts ...grpc.CallOption) (*MsgCreateGridBlockFeeResponse, error)
	CreateHypergridNode(ctx context.Context, in *MsgCreateHypergridNode, opts ...grpc.CallOption) (*MsgCreateHypergridNodeResponse, error)
	UpdateHypergridNode(ctx context.Context, in *MsgUpdateHypergridNode, opts ...grpc.CallOption) (*MsgUpdateHypergridNodeResponse, error)
	DeleteHypergridNode(ctx context.Context, in *MsgDeleteHypergridNode, opts ...grpc.CallOption) (*MsgDeleteHypergridNodeResponse, error)
	CreateFeeSettlementBill(ctx context.Context, in *MsgCreateFeeSettlementBill, opts ...grpc.CallOption) (*MsgCreateFeeSettlementBillResponse, error)
	CreateGridInbox(ctx context.Context, in *MsgCreateGridInbox, opts ...grpc.CallOption) (*MsgCreateGridInboxResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateSolanaAccount(ctx context.Context, in *MsgCreateSolanaAccount, opts ...grpc.CallOption) (*MsgCreateSolanaAccountResponse, error) {
	out := new(MsgCreateSolanaAccountResponse)
	err := c.cc.Invoke(ctx, Msg_CreateSolanaAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSolanaAccount(ctx context.Context, in *MsgUpdateSolanaAccount, opts ...grpc.CallOption) (*MsgUpdateSolanaAccountResponse, error) {
	out := new(MsgUpdateSolanaAccountResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateSolanaAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteSolanaAccount(ctx context.Context, in *MsgDeleteSolanaAccount, opts ...grpc.CallOption) (*MsgDeleteSolanaAccountResponse, error) {
	out := new(MsgDeleteSolanaAccountResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteSolanaAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateGridBlockFee(ctx context.Context, in *MsgCreateGridBlockFee, opts ...grpc.CallOption) (*MsgCreateGridBlockFeeResponse, error) {
	out := new(MsgCreateGridBlockFeeResponse)
	err := c.cc.Invoke(ctx, Msg_CreateGridBlockFee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateHypergridNode(ctx context.Context, in *MsgCreateHypergridNode, opts ...grpc.CallOption) (*MsgCreateHypergridNodeResponse, error) {
	out := new(MsgCreateHypergridNodeResponse)
	err := c.cc.Invoke(ctx, Msg_CreateHypergridNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateHypergridNode(ctx context.Context, in *MsgUpdateHypergridNode, opts ...grpc.CallOption) (*MsgUpdateHypergridNodeResponse, error) {
	out := new(MsgUpdateHypergridNodeResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateHypergridNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteHypergridNode(ctx context.Context, in *MsgDeleteHypergridNode, opts ...grpc.CallOption) (*MsgDeleteHypergridNodeResponse, error) {
	out := new(MsgDeleteHypergridNodeResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteHypergridNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateFeeSettlementBill(ctx context.Context, in *MsgCreateFeeSettlementBill, opts ...grpc.CallOption) (*MsgCreateFeeSettlementBillResponse, error) {
	out := new(MsgCreateFeeSettlementBillResponse)
	err := c.cc.Invoke(ctx, Msg_CreateFeeSettlementBill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateGridInbox(ctx context.Context, in *MsgCreateGridInbox, opts ...grpc.CallOption) (*MsgCreateGridInboxResponse, error) {
	out := new(MsgCreateGridInboxResponse)
	err := c.cc.Invoke(ctx, Msg_CreateGridInbox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateSolanaAccount(context.Context, *MsgCreateSolanaAccount) (*MsgCreateSolanaAccountResponse, error)
	UpdateSolanaAccount(context.Context, *MsgUpdateSolanaAccount) (*MsgUpdateSolanaAccountResponse, error)
	DeleteSolanaAccount(context.Context, *MsgDeleteSolanaAccount) (*MsgDeleteSolanaAccountResponse, error)
	CreateGridBlockFee(context.Context, *MsgCreateGridBlockFee) (*MsgCreateGridBlockFeeResponse, error)
	CreateHypergridNode(context.Context, *MsgCreateHypergridNode) (*MsgCreateHypergridNodeResponse, error)
	UpdateHypergridNode(context.Context, *MsgUpdateHypergridNode) (*MsgUpdateHypergridNodeResponse, error)
	DeleteHypergridNode(context.Context, *MsgDeleteHypergridNode) (*MsgDeleteHypergridNodeResponse, error)
	CreateFeeSettlementBill(context.Context, *MsgCreateFeeSettlementBill) (*MsgCreateFeeSettlementBillResponse, error)
	CreateGridInbox(context.Context, *MsgCreateGridInbox) (*MsgCreateGridInboxResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreateSolanaAccount(context.Context, *MsgCreateSolanaAccount) (*MsgCreateSolanaAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSolanaAccount not implemented")
}
func (UnimplementedMsgServer) UpdateSolanaAccount(context.Context, *MsgUpdateSolanaAccount) (*MsgUpdateSolanaAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSolanaAccount not implemented")
}
func (UnimplementedMsgServer) DeleteSolanaAccount(context.Context, *MsgDeleteSolanaAccount) (*MsgDeleteSolanaAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSolanaAccount not implemented")
}
func (UnimplementedMsgServer) CreateGridBlockFee(context.Context, *MsgCreateGridBlockFee) (*MsgCreateGridBlockFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGridBlockFee not implemented")
}
func (UnimplementedMsgServer) CreateHypergridNode(context.Context, *MsgCreateHypergridNode) (*MsgCreateHypergridNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHypergridNode not implemented")
}
func (UnimplementedMsgServer) UpdateHypergridNode(context.Context, *MsgUpdateHypergridNode) (*MsgUpdateHypergridNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHypergridNode not implemented")
}
func (UnimplementedMsgServer) DeleteHypergridNode(context.Context, *MsgDeleteHypergridNode) (*MsgDeleteHypergridNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHypergridNode not implemented")
}
func (UnimplementedMsgServer) CreateFeeSettlementBill(context.Context, *MsgCreateFeeSettlementBill) (*MsgCreateFeeSettlementBillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeeSettlementBill not implemented")
}
func (UnimplementedMsgServer) CreateGridInbox(context.Context, *MsgCreateGridInbox) (*MsgCreateGridInboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGridInbox not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateSolanaAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSolanaAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSolanaAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateSolanaAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSolanaAccount(ctx, req.(*MsgCreateSolanaAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSolanaAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSolanaAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSolanaAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateSolanaAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSolanaAccount(ctx, req.(*MsgUpdateSolanaAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteSolanaAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteSolanaAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteSolanaAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteSolanaAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteSolanaAccount(ctx, req.(*MsgDeleteSolanaAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateGridBlockFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateGridBlockFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateGridBlockFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateGridBlockFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateGridBlockFee(ctx, req.(*MsgCreateGridBlockFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateHypergridNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateHypergridNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateHypergridNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateHypergridNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateHypergridNode(ctx, req.(*MsgCreateHypergridNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateHypergridNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateHypergridNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateHypergridNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateHypergridNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateHypergridNode(ctx, req.(*MsgUpdateHypergridNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteHypergridNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteHypergridNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteHypergridNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteHypergridNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteHypergridNode(ctx, req.(*MsgDeleteHypergridNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateFeeSettlementBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateFeeSettlementBill)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateFeeSettlementBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateFeeSettlementBill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateFeeSettlementBill(ctx, req.(*MsgCreateFeeSettlementBill))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateGridInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateGridInbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateGridInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateGridInbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateGridInbox(ctx, req.(*MsgCreateGridInbox))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hypergridssn.hypergridssn.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateSolanaAccount",
			Handler:    _Msg_CreateSolanaAccount_Handler,
		},
		{
			MethodName: "UpdateSolanaAccount",
			Handler:    _Msg_UpdateSolanaAccount_Handler,
		},
		{
			MethodName: "DeleteSolanaAccount",
			Handler:    _Msg_DeleteSolanaAccount_Handler,
		},
		{
			MethodName: "CreateGridBlockFee",
			Handler:    _Msg_CreateGridBlockFee_Handler,
		},
		{
			MethodName: "CreateHypergridNode",
			Handler:    _Msg_CreateHypergridNode_Handler,
		},
		{
			MethodName: "UpdateHypergridNode",
			Handler:    _Msg_UpdateHypergridNode_Handler,
		},
		{
			MethodName: "DeleteHypergridNode",
			Handler:    _Msg_DeleteHypergridNode_Handler,
		},
		{
			MethodName: "CreateFeeSettlementBill",
			Handler:    _Msg_CreateFeeSettlementBill_Handler,
		},
		{
			MethodName: "CreateGridInbox",
			Handler:    _Msg_CreateGridInbox_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hypergridssn/hypergridssn/tx.proto",
}
